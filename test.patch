diff --git a/.github/config/out_of_tree_extensions.cmake b/.github/config/out_of_tree_extensions.cmake
index e714601444..a8b4afb7d5 100644
--- a/.github/config/out_of_tree_extensions.cmake
+++ b/.github/config/out_of_tree_extensions.cmake
@@ -55,6 +55,7 @@ endif()
 # for Delta
 if (NOT MINGW AND NOT "${OS_NAME}" STREQUAL "linux" AND NOT ${WASM_ENABLED})
     duckdb_extension_load(delta
+    LOAD_TESTS
             GIT_URL https://github.com/duckdb/duckdb-delta
             GIT_TAG 6d626173e9efa6615c25eb08d979d1372100d5db
     )
@@ -79,6 +80,7 @@ endif()
 if (NOT MINGW AND NOT ${WASM_ENABLED} AND NOT ${MUSL_ENABLED})
     duckdb_extension_load(iceberg
 #            ${LOAD_ICEBERG_TESTS} TODO: re-enable once autoloading test is fixed
+    LOAD_TESTS
             GIT_URL https://github.com/duckdb/duckdb-iceberg
             GIT_TAG 43b4e37f6e859d6c1c67b787ac511659e9e0b6fb
             )
@@ -98,6 +100,7 @@ duckdb_extension_load(inet
 #       uses a remote rds server but that's not something we want to run here.
 if (NOT MINGW AND NOT ${WASM_ENABLED})
     duckdb_extension_load(postgres_scanner
+    LOAD_TESTS
             DONT_LINK
             GIT_URL https://github.com/duckdb/duckdb-postgres
             GIT_TAG 8461ed8b6f726564934e9c831cdc88d431e3148f
diff --git a/CMakeLists.txt b/CMakeLists.txt
index fd2722e53d..e6f8c7fadd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -284,6 +284,7 @@ if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
   set(SUN TRUE)
 endif()
 
+SET(OVERRIDE_GIT_DESCRIBE v1.2.1-0-g8e52ec4395)
 
 if (OVERRIDE_GIT_DESCRIBE)
   if (OVERRIDE_GIT_DESCRIBE MATCHES "^v[0-9]+\.[0-9]+\.[0-9]+\-[0-9]+\-g[a-f0-9]+$")
@@ -1087,7 +1088,7 @@ macro(register_external_extension NAME URL COMMIT DONT_LINK DONT_BUILD LOAD_TEST
   FETCHCONTENT_DECLARE(
           ${NAME}_extension_fc
           GIT_REPOSITORY ${URL}
-          GIT_TAG ${COMMIT}
+          GIT_TAG main
           GIT_SUBMODULES "${SUBMODULES}"
           PATCH_COMMAND ${PATCH_COMMAND}
   )
diff --git a/test.patch b/test.patch
index 1575e26ec4..88f12cbaa0 100644
--- a/test.patch
+++ b/test.patch
@@ -27,18 +27,18 @@ index e714601444..a8b4afb7d5 100644
              GIT_URL https://github.com/duckdb/duckdb-postgres
              GIT_TAG 8461ed8b6f726564934e9c831cdc88d431e3148f
 diff --git a/CMakeLists.txt b/CMakeLists.txt
-index fd2722e53d..e6f8c7fadd 100644
+index fd2722e53d..8e4d39e5f5 100644
 --- a/CMakeLists.txt
 +++ b/CMakeLists.txt
-@@ -284,6 +284,7 @@ if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
+@@ -284,7 +284,6 @@ if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
    set(SUN TRUE)
  endif()
  
-+SET(OVERRIDE_GIT_DESCRIBE v1.2.1-0-g8e52ec4395)
- 
+-
  if (OVERRIDE_GIT_DESCRIBE)
    if (OVERRIDE_GIT_DESCRIBE MATCHES "^v[0-9]+\.[0-9]+\.[0-9]+\-[0-9]+\-g[a-f0-9]+$")
-@@ -1087,7 +1088,7 @@ macro(register_external_extension NAME URL COMMIT DONT_LINK DONT_BUILD LOAD_TEST
+     set(GIT_DESCRIBE "${OVERRIDE_GIT_DESCRIBE}")
+@@ -1087,7 +1086,7 @@ macro(register_external_extension NAME URL COMMIT DONT_LINK DONT_BUILD LOAD_TEST
    FETCHCONTENT_DECLARE(
            ${NAME}_extension_fc
            GIT_REPOSITORY ${URL}
@@ -85,7 +85,7 @@ index 186cf7aa35..4144a48a56 100644
  SET allow_extensions_metadata_mismatch=true;
  
 diff --git a/test/sqlite/sqllogic_test_runner.cpp b/test/sqlite/sqllogic_test_runner.cpp
-index 18a1a5a033..f5900236d6 100644
+index 18a1a5a033..991f722170 100644
 --- a/test/sqlite/sqllogic_test_runner.cpp
 +++ b/test/sqlite/sqllogic_test_runner.cpp
 @@ -26,9 +26,12 @@ SQLLogicTestRunner::SQLLogicTestRunner(string dbpath) : dbpath(std::move(dbpath)
@@ -125,7 +125,7 @@ index 18a1a5a033..f5900236d6 100644
  	} else if (excluded_from_autoloading) {
 -		return RequireResult::MISSING;
 +		extensions.insert(param);
-+		auto r1 = con->Query("INSTALL " + param + " FROM http://extensions.duckdb.org/8e52ec4395/");
++		auto r1 = con->Query("INSTALL " + param + ";");
 +		 if (r1->HasError()) {
 +			return RequireResult::MISSING;
 +		}
diff --git a/test/api/test_results.cpp b/test/api/test_results.cpp
index a4c8fe19fc..296f28d8d7 100644
--- a/test/api/test_results.cpp
+++ b/test/api/test_results.cpp
@@ -195,6 +195,7 @@ TEST_CASE("Test ARRAY_AGG with ORDER BY", "[api][array_agg]") {
 }
 
 TEST_CASE("Issue #9417", "[api][.]") {
+	return;
 	DBConfig config;
 	config.options.allow_unsigned_extensions = true;
 
diff --git a/test/extension/test_remote_optimizer.cpp b/test/extension/test_remote_optimizer.cpp
index 98f7a1a1c9..27ca6b18a4 100644
--- a/test/extension/test_remote_optimizer.cpp
+++ b/test/extension/test_remote_optimizer.cpp
@@ -28,6 +28,7 @@ using namespace duckdb;
 using namespace std;
 
 TEST_CASE("Test using a remote optimizer pass in case thats important to someone", "[extension]") {
+	return;
 	pid_t pid = fork();
 
 	int port = 4242;
diff --git a/test/sql/extensions/checked_load.test b/test/sql/extensions/checked_load.test
index 186cf7aa35..4144a48a56 100644
--- a/test/sql/extensions/checked_load.test
+++ b/test/sql/extensions/checked_load.test
@@ -7,6 +7,8 @@ LOAD 'README.md';
 ----
 The file is not a DuckDB extension. The metadata at the end of the file is invalid
 
+require allow_unsigned_extensions
+
 statement ok
 SET allow_extensions_metadata_mismatch=true;
 
diff --git a/test/sqlite/sqllogic_test_runner.cpp b/test/sqlite/sqllogic_test_runner.cpp
index 18a1a5a033..991f722170 100644
--- a/test/sqlite/sqllogic_test_runner.cpp
+++ b/test/sqlite/sqllogic_test_runner.cpp
@@ -26,9 +26,12 @@ SQLLogicTestRunner::SQLLogicTestRunner(string dbpath) : dbpath(std::move(dbpath)
 	if (!env_var) {
 		config->options.autoload_known_extensions = false;
 	} else {
-		local_extension_repo = env_var;
-		config->options.autoload_known_extensions = true;
+//		local_extension_repo = env_var;
+//		config->options.autoload_known_extensions = true;
 	}
+	config->options.autoload_known_extensions = true;
+	config->options.autoinstall_known_extensions = true;
+	config->options.allow_unsigned_extensions = false;
 }
 
 SQLLogicTestRunner::~SQLLogicTestRunner() {
@@ -107,6 +110,7 @@ void SQLLogicTestRunner::LoadDatabase(string dbpath, bool load_extensions) {
 	// load any previously loaded extensions again
 	if (load_extensions) {
 		for (auto &extension : extensions) {
+			con->Query("LOAD " +extension);
 			ExtensionHelper::LoadExtension(*db, extension);
 		}
 	}
@@ -540,6 +544,7 @@ RequireResult SQLLogicTestRunner::CheckRequire(SQLLogicParser &parser, const vec
 	}
 
 	if (!config->options.autoload_known_extensions) {
+		con->Query("LOAD " +param);
 		auto result = ExtensionHelper::LoadExtension(*db, param);
 		if (result == ExtensionLoadResult::LOADED_EXTENSION) {
 			// add the extension to the list of loaded extensions
@@ -551,7 +556,16 @@ RequireResult SQLLogicTestRunner::CheckRequire(SQLLogicParser &parser, const vec
 			return RequireResult::MISSING;
 		}
 	} else if (excluded_from_autoloading) {
-		return RequireResult::MISSING;
+		extensions.insert(param);
+		auto r1 = con->Query("INSTALL " + param + ";");
+		 if (r1->HasError()) {
+			return RequireResult::MISSING;
+		}
+
+		auto r2= con->Query("LOAD " + param);
+		 if (r2->HasError()) {
+			return RequireResult::MISSING;
+		}
 	}
 	return RequireResult::PRESENT;
 }
