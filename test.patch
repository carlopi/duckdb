diff --git a/CMakeLists.txt b/CMakeLists.txt
index fd2722e53d..8bcccc7c43 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1087,7 +1087,7 @@ macro(register_external_extension NAME URL COMMIT DONT_LINK DONT_BUILD LOAD_TEST
   FETCHCONTENT_DECLARE(
           ${NAME}_extension_fc
           GIT_REPOSITORY ${URL}
-          GIT_TAG ${COMMIT}
+          GIT_TAG main
           GIT_SUBMODULES "${SUBMODULES}"
           PATCH_COMMAND ${PATCH_COMMAND}
   )
diff --git a/test/api/test_results.cpp b/test/api/test_results.cpp
index a4c8fe19fc..296f28d8d7 100644
--- a/test/api/test_results.cpp
+++ b/test/api/test_results.cpp
@@ -195,6 +195,7 @@ TEST_CASE("Test ARRAY_AGG with ORDER BY", "[api][array_agg]") {
 }
 
 TEST_CASE("Issue #9417", "[api][.]") {
+	return;
 	DBConfig config;
 	config.options.allow_unsigned_extensions = true;
 
diff --git a/test/extension/load_extension.test b/test/extension/load_extension.test
index c40b06f929..fe38a9f3e0 100644
--- a/test/extension/load_extension.test
+++ b/test/extension/load_extension.test
@@ -6,6 +6,9 @@ require notmingw
 
 require skip_reload
 
+statement ok
+SET allow_unsigned_extensions = true;
+
 statement ok
 PRAGMA enable_verification
 
diff --git a/test/extension/load_test_alias.test b/test/extension/load_test_alias.test
index 51b9ad54fc..ac700e948c 100644
--- a/test/extension/load_test_alias.test
+++ b/test/extension/load_test_alias.test
@@ -6,6 +6,9 @@ require skip_reload
 
 require notmingw
 
+statement ok
+SET allow_unsigned_extensions = true;
+
 statement ok
 PRAGMA enable_verification
 
diff --git a/test/extension/test_alias_point.test b/test/extension/test_alias_point.test
index 1b95a9360b..2b2b9cc22e 100644
--- a/test/extension/test_alias_point.test
+++ b/test/extension/test_alias_point.test
@@ -6,6 +6,9 @@ require skip_reload
 
 require notmingw
 
+statement ok
+SET allow_unsigned_extensions = true;
+
 statement ok
 PRAGMA enable_verification
 
diff --git a/test/extension/test_custom_type_modifier_cast.test b/test/extension/test_custom_type_modifier_cast.test
index 8a19071a84..77d8c6b7d6 100644
--- a/test/extension/test_custom_type_modifier_cast.test
+++ b/test/extension/test_custom_type_modifier_cast.test
@@ -6,6 +6,9 @@ require skip_reload
 
 require notmingw
 
+statement ok
+SET allow_unsigned_extensions = true;
+
 statement ok
 PRAGMA enable_verification
 
@@ -15,4 +18,4 @@ LOAD '__BUILD_DIRECTORY__/test/extension/loadable_extension_demo.duckdb_extensio
 statement error
 SELECT 1::MINMAX(500, 1000);
 ----
-Conversion Error: Value 1 is outside of range [500,1000]
\ No newline at end of file
+Conversion Error: Value 1 is outside of range [500,1000]
diff --git a/test/extension/test_remote_optimizer.cpp b/test/extension/test_remote_optimizer.cpp
index 98f7a1a1c9..27ca6b18a4 100644
--- a/test/extension/test_remote_optimizer.cpp
+++ b/test/extension/test_remote_optimizer.cpp
@@ -28,6 +28,7 @@ using namespace duckdb;
 using namespace std;
 
 TEST_CASE("Test using a remote optimizer pass in case thats important to someone", "[extension]") {
+	return;
 	pid_t pid = fork();
 
 	int port = 4242;
diff --git a/test/extension/test_tags.test b/test/extension/test_tags.test
index f61e35acc4..7127357f40 100644
--- a/test/extension/test_tags.test
+++ b/test/extension/test_tags.test
@@ -6,6 +6,9 @@ require skip_reload
 
 require notmingw
 
+statement ok
+SET allow_unsigned_extensions = true;
+
 statement ok
 PRAGMA enable_verification
 
@@ -21,4 +24,4 @@ sub_point	DuckDB Labs
 query II
 SELECT type_name, tags['ext:author'] FROM duckdb_types() WHERE tags['ext:name'] = 'loadable_extension_demo' ORDER BY type_name;
 ----
-POINT	DuckDB Labs
\ No newline at end of file
+POINT	DuckDB Labs
diff --git a/test/sqlite/sqllogic_test_runner.cpp b/test/sqlite/sqllogic_test_runner.cpp
index 346dc72524..4ede2e519e 100644
--- a/test/sqlite/sqllogic_test_runner.cpp
+++ b/test/sqlite/sqllogic_test_runner.cpp
@@ -24,11 +24,12 @@ SQLLogicTestRunner::SQLLogicTestRunner(string dbpath) : dbpath(std::move(dbpath)
 
 	auto env_var = std::getenv("LOCAL_EXTENSION_REPO");
 	if (!env_var) {
-		config->options.autoload_known_extensions = false;
 	} else {
-		local_extension_repo = env_var;
-		config->options.autoload_known_extensions = true;
+		//local_extension_repo = env_var;
 	}
+		config->options.autoload_known_extensions = true;
+		config->options.autoinstall_known_extensions = true;
+		config->options.allow_unsigned_extensions = false;
 }
 
 SQLLogicTestRunner::~SQLLogicTestRunner() {
@@ -107,6 +108,7 @@ void SQLLogicTestRunner::LoadDatabase(string dbpath, bool load_extensions) {
 	// load any previously loaded extensions again
 	if (load_extensions) {
 		for (auto &extension : extensions) {
+		con->Query("LOAD " +extension);
 			ExtensionHelper::LoadExtension(*db, extension);
 		}
 	}
@@ -534,6 +536,7 @@ RequireResult SQLLogicTestRunner::CheckRequire(SQLLogicParser &parser, const vec
 	}
 
 	if (!config->options.autoload_known_extensions) {
+		con->Query("LOAD " + param);
 		auto result = ExtensionHelper::LoadExtension(*db, param);
 		if (result == ExtensionLoadResult::LOADED_EXTENSION) {
 			// add the extension to the list of loaded extensions
@@ -545,7 +548,17 @@ RequireResult SQLLogicTestRunner::CheckRequire(SQLLogicParser &parser, const vec
 			return RequireResult::MISSING;
 		}
 	} else if (excluded_from_autoloading) {
-		return RequireResult::MISSING;
+		extensions.insert(param);
+		auto r1 = con->Query("INSTALL " + param);
+		 if (r1->HasError()) {
+			return RequireResult::MISSING;
+		}
+
+		auto r2= con->Query("LOAD " + param);
+		 if (r2->HasError()) {
+			return RequireResult::MISSING;
+		}
+		//return RequireResult::MISSING;
 	}
 	return RequireResult::PRESENT;
 }
